---
import DynamicHead from "./dynamicHead.astro";
import "react-responsive-modal/styles.css";
const requestUrl = Astro.request.url;
const fullUrl = new URL(requestUrl);
const rawParams = fullUrl.searchParams;
const decodedParams = new URLSearchParams(rawParams);
const hasResults = decodedParams.has("r1");
const ogImageUrl = hasResults
  ? `${fullUrl.origin}/api/og${fullUrl.search}`
  : `${fullUrl.origin}/default-og.jpg`;

type LayoutProps = {
  unfixed?: boolean;
};

const { unfixed }: LayoutProps = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <DynamicHead ogImageUrl={ogImageUrl} hasResults={hasResults} />
  </head>
  <body>
    <div class={`container ${unfixed ? "unfixed" : ""}`}>
      <!-- <div id="debug"></div> -->

      <slot />
    </div>
  </body>
</html>

<!-- <script define:vars={{ hasResults, ogImageUrl, requestUrl }}>
  // Get the parameters before they're cleared
  const currentUrl = new URL(window.location.href);
  const params = currentUrl.searchParams;
  
  const debugInfo = {
    serverSide: {
      requestUrl,
      hasResults,
      ogImageUrl
    },
    clientSide: {
      currentUrl: window.location.href,
      searchString: window.location.search,
      params: Object.fromEntries(params.entries()),
      hasQ1: params.has('q1')
    }
  };

  document.getElementById('debug').innerHTML = `
    <pre>${JSON.stringify(debugInfo, null, 2)}</pre>
  `;
</script> -->

<style is:global lang="scss">
  @import "../styles/breakpoints.scss";
  @import "../styles/fonts.css";

  :root {
    --primary: #067000;
    --primary10: #e6f1e6;
    --primary25: #c1dbbf;
    --primary50: #82b780;
    --primary80: #388c33;
    --white: #ffffff;
    --lightGreen: #d2fcbf;
    --faintGreen: #fbfff9;
    --grey: #f0f0f0;

    --transition08: all 0.8s cubic-bezier(0.08, 0.75, 0.66, 0.93);
  }
  body {
    font-family: "Literata", serif;
    background: var(--primary);
    color: var(--white);
    margin: 0;
  }

  .btn {
    width: 100%;
    height: 64px;
  }
  button,
  a.btn {
    font-family: "Literata", serif;
    border: none;
    outline: none;
    padding: 0 12px;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 10px;
    overflow: hidden;
    text-decoration: none;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    margin: 0;
  }

  .container {
    padding: 0 24px;
    display: flex;
    flex-direction: column;
    min-height: -webkit-fill-available;
    // height: calc(100vh - 60px);
    height: 100dvh;
    overflow: hidden;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: fixed;
    margin: auto;
    left: 0;
    right: 0;
    &.unfixed {
      position: relative;
      height: auto;
    }
    @include respond-to(tablet) {
      padding: 0 80px;
      position: relative;
      height: 100vh;
      overflow: auto;
    }
  }

  .footer {
    position: absolute;
    bottom: 0;
    padding: 24px;
  }

  .display1 {
    font-size: 50px;
    font-weight: 400;
    line-height: 107%;
    @include respond-to(mobile) {
      font-size: 72px;
    }
    @include respond-to(tablet) {
      font-size: 104px;
    }
  }

  .display2 {
    font-weight: 400;
    font-size: 28px;
    line-height: 110%;
    @include respond-to(mobile) {
      font-size: 36px;
    }

    @include respond-to(tablet) {
      font-size: 56px;
    }
  }

  .display3 {
    font-weight: 400;
    font-size: 3.6vh;
    line-height: 107%;
    @include respond-to(mobile) {
      font-size: 3.2vh;
    }

    @include respond-to(tablet) {
      font-size: 56px;
    }
  }

  .display4 {
    font-weight: 400;
    font-size: 24px;
    line-height: 24px;
  }

  .body {
    font-weight: 400;
    font-size: 20px;
    line-height: 120%;
    @include respond-to(tablet) {
      font-size: 28px;
    }
  }

  .body2 {
    font-weight: 400;
    font-size: 20px;
    line-height: 120%;
    @include respond-to(tablet) {
      font-size: 20px;
    }
  }

  .smallPrint {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 12px;
    display: block;
    font-weight: 400;
    line-height: 140%;
    font-family: "PT Sans", sans-serif;
    color: var(--primary50);
    @include respond-to(mobile) {
      font-size: 14px;
    }
  }
  .color-primary {
    color: var(--primary);
  }
  .react-responsive-modal-modal {
    width: calc(100% - 48px);
    box-sizing: border-box;
    padding: 32px 24px;
    margin: 0;
    border-radius: 16px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
  }

  .react-responsive-modal-closeButton {
    display: none;
  }
  .react-responsive-modal-overlay {
    background-color: rgba(0, 0, 0, 0.4);
  }

  .cookies-modal-container {
    .react-responsive-modal-root {
      bottom: 24px;
      top: auto;
    }
  }

  .about-modal-container {
    .react-responsive-modal-root {
      top: auto;
      bottom: 0;
    }
    .react-responsive-modal-modal {
      width: 100%;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  .share-modal-container {
    .react-responsive-modal-modal {
      background: var(--primary25);
      top: 24px;
    }
  }
</style>
