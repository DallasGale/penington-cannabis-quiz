---
import DynamicHead from "./dynamicHead.astro";
import "react-responsive-modal/styles.css";
import LocationGuard from "./locationGuard";

console.log("Environment:", {
  NODE_ENV: import.meta.env.PROD ? "production" : "development",
  VERCEL_ENV: process.env.VERCEL_ENV,
  VERCEL_URL: process.env.VERCEL_URL,
});
// Get raw URL data from Astro's URL
const url = new URL(Astro.request.url);
const hasParams = url.searchParams.has("r1"); // Changed from q1 to r1 to match your URL

// Get all results for OG image
const results = {
  r1: url.searchParams.get("r1"),
  r2: url.searchParams.get("r2"),
};

// Important: Ensure OG image URL always includes parameters
const ogImageUrl = hasParams
  ? `${url.origin}/api/og${url.search}&t=${Date.now()}`.replace("/og/", "/og")
  : `${url.origin}/default-og.jpg`;

// Add more descriptive metadata for social media
const pageTitle = hasParams
  ? `Quiz Results: ${results.r1} and ${results.r2}`
  : "Take the Quiz!";

// const pageDescription = hasParams
//   ? `Check out my quiz results! I scored ${results.r1} on part 1 and ${results.r2} on part 2.`
//   : 'Test your knowledge with our quiz';

console.log("Server State:", {
  url: url.toString(),
  search: url.search,
  params: Object.fromEntries(url.searchParams.entries()),
  hasParams,
  ogImageUrl,
});
type LayoutProps = {
  unfixed?: boolean;
  bodyClass?: string;
  homepage?: boolean;
};


// Generate a static fallback first
const fallbackOgUrl = 'https://www.regulateit.com.au/default-og.jpg';

// Then the dynamic URL
const dynamicOgUrl = hasParams 
  ? `https://www.regulateit.com.au/api/og${url.search}`
  : fallbackOgUrl;

  console.log("Dynamic OG URL:", dynamicOgUrl);

const { unfixed, bodyClass = "", homepage }: LayoutProps = Astro.props;
const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta property="og:image:secure_url" content={ogImageUrl} />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image" content={ogImageUrl} />
    <meta property="og:url" content="https://www.regulateit.com.au/" />
    <meta property="og:type" content="website" />
     <!-- Static fallback first -->
     <meta property="og:image" content={fallbackOgUrl} />
    
     <!-- Dynamic replacement script -->
     {hasParams && (
       <script define:vars={{ dynamicOgUrl }}>
         // Replace OG image after a short delay
         window.addEventListener('load', () => {
           setTimeout(() => {
             const metaTags = document.getElementsByTagName('meta');
             for (let tag of metaTags) {
               if (tag.getAttribute('property') === 'og:image') {
                 tag.setAttribute('content', dynamicOgUrl);
               }
             }
           }, 100);
         });
       </script>
     )}
    <DynamicHead ogImageUrl={ogImageUrl} hasResults={hasParams} title={title} />
  </head>
  <body class={`${bodyClass}`}>
    <div
      class={`container ${unfixed ? "unfixed" : ""} ${homepage ? "homepage" : ""}`}
    >
      <!-- <LocationGuard client:load> -->
        <slot />
      <!-- </LocationGuard> -->
    </div>
  </body>
</html>

<style is:global lang="scss">
  @import "../styles/breakpoints.scss";
  @import "../styles/fonts.css";

  :root {
    --primary: #067000;
    --primary10: #e6f1e6;
    --primary25: #c1dbbf;
    --primary50: #82b780;
    --primary80: #388c33;
    --white: #ffffff;
    --lightGreen: #d2fcbf;
    --faintGreen: #fbfff9;
    --grey: #f0f0f0;
    --transition05: all 0.5s cubic-bezier(0.08, 0.75, 0.66, 0.93);

    --transition08: all 0.8s cubic-bezier(0.08, 0.75, 0.66, 0.93);
  }
  body {
    font-family: "Literata", serif;
    background: var(--primary);
    color: var(--white);
    margin: 0;
  }

  .btn {
    width: 100%;
    height: 64px;
  }
  button,
  a.btn {
    font-family: "Literata", serif;
    border: none;
    outline: none;
    padding: 0 12px;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 10px;
    overflow: hidden;
    text-decoration: none;
    box-sizing: border-box;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    margin: 0;
  }

  .container {
    padding: 0 24px;
    display: flex;
    flex-direction: column;
    min-height: -webkit-fill-available;
    height: 100dvh;
    overflow: hidden;
    align-items: center;
    justify-content: center;
    text-align: center;
    position: fixed;
    margin: auto;
    left: 0;
    right: 0;
    &.unfixed {
      position: relative;
      height: auto;
    }

    @include respond-to(tablet) {
      padding: 0 80px;
      position: fixed;
      overflow: hidden;
      height: 100dvh;
    }
    &.homepage {
      @include respond-to(vertically-short) {
        position: relative !important;
        height: auto;
        overflow: auto;
        padding-top: 100px;
      }
    }
  }

  .display1 {
    letter-spacing: -3px;
    font-size: 50px;
    font-weight: 300;
    line-height: 107%;
    @include respond-to(mobile) {
      letter-spacing: -3.6px;
      font-size: 72px;
    }
    @include respond-to(tablet) {
      letter-spacing: -5.2px;
      font-size: 104px;
    }
  }

  .display2 {
    letter-spacing: -1.4px;
    font-weight: 300;
    font-size: 28px;
    line-height: 110%;
    @include respond-to(mobile) {
      font-size: 36px;
    }

    @include respond-to(tablet) {
      letter-spacing: -2.8px;
      font-size: 56px;
    }
  }

  .display3 {
    letter-spacing: -1px;
    font-weight: 300;
    font-size: 3.6vh;
    line-height: 107%;
    @include respond-to(mobile) {
      font-size: 3.2vh;
    }

    @include respond-to(tablet) {
      letter-spacing: -2.2px;
      font-size: 44px;
    }
  }

  .display4 {
    font-weight: 300;
    font-size: 24px;
    line-height: 24px;
    letter-spacing: -1.2px;
  }
  .display5 {
    letter-spacing: -1.4px;
    font-weight: 300;
    font-size: 28px;
    line-height: 48px;
    @include respond-to(desktop) {
      font-size: 40px;
      letter-spacing: -2px;
    }
  }
  .display6 {
    font-weight: 300;
    font-size: 20px;
    letter-spacing: -1px;
    line-height: 24px;
    @include respond-to(desktop) {
      font-size: 24px;
      letter-spacing: -1.2px;
    }
  }
  .display7 {
    font-weight: 300;
    font-size: 62px;
    line-height: 100%;
    @include respond-to(desktop) {
      font-size: 94px;
    }
  }

  .body {
    letter-spacing: -1px;
    font-weight: 300;
    font-size: 20px;
    line-height: 120%;
    @include respond-to(tablet) {
      font-size: 28px;
      letter-spacing: -1.4px;
    }
  }

  .body2 {
    letter-spacing: -1px;
    font-weight: 300;
    font-size: 20px;
    line-height: 120%;
    @include respond-to(tablet) {
      font-size: 20px;
      letter-spacing: -0.5px;
    }
  }

  .body3 {
    font-family: "PT Sans", sans-serif;
    font-weight: 300;
    line-height: 120%;
    font-size: 16px;
    // letter-spacing: 0px;
  }
  .body4 {
    font-family: "PT Sans", sans-serif;
    font-weight: 300;
    line-height: 120%;
    font-size: 20px;
    letter-spacing: -1px;
  }
  .body5 {
    font-family: "PT Sans", sans-serif;
    font-weight: 300;
    line-height: 140%;
    font-size: 16px;
    letter-spacing: 0px;
    @include respond-to(tablet) {
      font-size: 20px;
      letter-spacing: -0.4px;
    }
  }

  .smallPrint {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 12px;
    display: block;
    font-weight: 300;
    line-height: 140%;
    font-family: "PT Sans", sans-serif;
    color: var(--primary50);
    @include respond-to(mobile) {
      font-size: 14px;
    }
  }
  .color-primary {
    color: var(--primary);
  }
  .color-primary25 {
    color: var(--primary25);
  }
  .color-black {
    color: #000;
  }
  .react-responsive-modal-modal {
    width: calc(100% - 48px);
    box-sizing: border-box;
    padding: 32px 24px;
    margin: 0;
    border-radius: 16px;
    box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1);
  }

  .react-responsive-modal-closeButton {
    display: none;
  }
  .react-responsive-modal-overlay {
    background-color: rgba(0, 0, 0, 0.4);
  }

  .cookies-modal-container {
    .react-responsive-modal-root {
      bottom: 24px;
      top: auto;
    }
    .react-responsive-modal-modal {
      width: 100%;
      max-width: 452px;
      @include respond-to(desktop) {
        max-width: 1135px;
      }
    }
    .react-responsive-modal-container {
      padding: 0 20px;
      @include respond-to(desktop) {
        padding: 0;
      }
    }
  }

  .about-modal-container {
    .react-responsive-modal-root {
      top: auto;
      bottom: 0;
    }
    .react-responsive-modal-modal {
      width: 100%;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  .share-modal-container {
    .react-responsive-modal-modal {
      background: var(--primary25);
      top: 24px;
      border-radius: 20px;
      max-width: 414px;
      padding: 14px;
    }
    .react-responsive-modal-overlay {
      background: transparent;
    }
  }

  .show {
    opacity: 1;
    height: auto;
    visibility: visible;
    transition: var(--transition08);
  }

  .hide {
    opacity: 0;
    height: 0;
    visibility: hidden;
    transition: var(--transition08);
  }
</style>
